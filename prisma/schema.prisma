generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Device {
  id         String    @id @default(cuid())
  name       String
  isActive   Boolean   @default(false)
  lastSeenAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  telemetryPings TelemetryPing[]
  subscriptions  Subscription[]

  @@map("devices")
}

model TelemetryPing {
  id        String   @id @default(cuid())
  eventId   String   @unique // For idempotency
  deviceId  String
  metric    String // temperature, pressure, etc.
  value     Float
  status    String // ok, warning, critical
  ts        DateTime
  createdAt DateTime @default(now())

  // Relations
  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId, createdAt])
  @@map("telemetry_pings")
}

model Subscription {
  id          String             @id @default(cuid())
  deviceId    String
  planId      String
  status      SubscriptionStatus @default(PENDING)
  startDate   DateTime?
  endDate     DateTime?
  providerRef String? // Reference from payment provider
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId, status])
  @@map("subscriptions")
}

model Client {
  id        String   @id @default(cuid())
  name      String
  apiKey    String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  relayLogs RelayLog[]

  @@map("clients")
}

model RelayLog {
  id             String      @id @default(cuid())
  clientId       String
  idempotencyKey String      @unique
  message        String
  meta           Json?
  status         RelayStatus @default(PENDING)
  attempts       Int         @default(0)
  maxAttempts    Int         @default(3)
  nextRetryAt    DateTime?
  completedAt    DateTime?
  error          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([status, nextRetryAt])
  @@map("relay_logs")
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  EXPIRED
  CANCELLED
}

enum RelayStatus {
  PENDING
  SUCCESS
  FAILED
  RETRYING
}
